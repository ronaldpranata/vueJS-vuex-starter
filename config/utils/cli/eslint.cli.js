// node file system
var path = require ('path');

// helper functions

// options
var options = require ('../options.config.js');
var eslintOptions = options.eslint;
// config for reports to be generated
var reportsPathEslint = options.reportsPaths.types.eslint;

// execute:
writeEslintReportToFile(eslintOptions, reportsPathEslint);

// PRE:
//	cli: ESLint CLI Object 
//	eslintOptions: Option object from options.config.js
// POST:
//	returns report generated by ESLint CLI OBject
//
// Execute Eslint on files defined in eslintOptions.files
function getEslintReport (cli, eslintOptions) {
	// eslint will execute on all the files in the dir 
	// to generate the report
	return cli.executeOnFiles([eslintOptions.files]);
}

// POST:
//	Returns ESLint's CLIEngine
function getCLIEngine () {
	// CLIEngine
	var CLIEngine = require ('eslint').CLIEngine;
	var cli = new CLIEngine ({
		configFile: 'config/.eslintrc.js',
		ignorePath: 'config/.eslintignore'
	});

	return cli
}

// POST:
// 	Format report and return as results object 
function reportToResults (cli, format, report) {
	var formatter = cli.getFormatter(format);
	return formatter(report.results);
}

// PRE: 
//	eslintOptions: already preprocessed eslintOptions
//	reportsPathEslint: already preproceed reportsPathEslint
// POST:
//	file of each eslint report type will be created
//	will console.log when complete 
function writeEslintReportToFile (eslintOptions, reportsPathEslint) {
	// for each format, write the report to file allocated to each format
	var cli = getCLIEngine();
	var deepCreateAndWrite = require ("../helpers/FileSystem.helper").deepCreateAndWrite;
	var pathToApp = eslintOptions.pathToApp;

	var report = getEslintReport (cli, eslintOptions);

	for (var format in reportsPathEslint.formats) {
		var pathToFile = path.join(pathToApp, reportsPathEslint.outputFile[format]);
		// get result
		var result = reportToResults (cli, format, report);
		// create and write file
		deepCreateAndWrite (pathToFile, result, callback(format));
	}

	function callback (format) {
		return function () { if (!process.env.DEVELOPMENT) console.log (format + ": File Write Complete") };
	}
}
